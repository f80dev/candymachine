{"version":3,"sources":["connection.tsx","candy-machine.ts","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["SequenceType","getErrorForTransaction","connection","txid","a","confirmTransaction","getParsedConfirmedTransaction","tx","errors","meta","logMessages","forEach","log","m","regex","exec","index","lastIndex","length","push","sendTransactions","wallet","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","beforeTransactions","afterTransactions","publicKey","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","instructions","signers","transaction","Transaction","instruction","add","recentBlockhash","blockhash","setSigners","map","s","partialSign","partiallySignedTransactions","filter","t","signatures","find","sig","equals","fullySignedTransactions","signAllTransactions","signedTxns","concat","pendingTxns","console","signedTxnPromise","sendSignedTransaction","signedTransaction","then","slot","StopOnFailure","Promise","all","number","txs","result","sendTransaction","awaitConfirmation","includesFeePayer","signTransaction","rawTransaction","serialize","options","skipPreflight","sendRawTransaction","awaitTransactionSignatureConfirmation","DEFAULT_TIMEOUT","confirmation","Error","err","getUnixTs","Date","getTime","timeout","startTime","done","sleep","error","simulateResult","simulateTransaction","value","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","queryStatus","status","confirmations","subId","resolve","reject","setTimeout","onSignature","context","e","getSignatureStatuses","signatureStatuses","_signatureSubscriptions","removeSignatureListener","ms","CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","authority","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","retainAuthority","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","getCollectionPDA","candyMachineAddress","getCollectionAuthorityRecordPDA","newAuthority","mintOneToken","Keypair","generate","getAtaForMint","userTokenAccountAddress","userPayingAccountAddress","remainingAccounts","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","getNetworkToken","gatekeeperNetwork","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","rm","toBase58","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","undefined","collectionPDA","collectionPDAAccount","collectionPda","collectionData","collectionMint","collectionAuthorityRecord","collectionMetadata","collectionMasterEdition","setCollectionDuringMint","instructionsMatrix","signersMatrix","txnEstimate","INIT_INSTRUCTIONS_LENGTH","INIT_SIGNERS_LENGTH","initInstructions","splice","initSigners","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","isMinting","rpcUrl","setIsMinting","useWallet","useConnection","useState","verified","setVerified","useGateway","requestGatewayToken","gatewayStatus","webSocketSubscriptionId","setWebSocketSubscriptionId","clicked","setClicked","useEffect","removeAccountChangeListener","previousGatewayStatus","ref","useRef","current","usePrevious","fromStates","GatewayStatus","NOT_REQUESTED","REFRESH_TOKEN_REQUIRED","invalidToStates","UNKNOWN","disabled","onClick","network","ACTIVE","findGatewayToken","gatewayToken","isValid","endpoint","endsWith","window","open","getGatewayTokenAddressForOwnerAndGatekeeperNetwork","gatewayTokenAddress","onGatewayTokenChange","variant","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","getCountdownDate","endSettingType","toDate","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","rpcHost","useMemo","refreshCandyMachineState","useCallback","cndy","active","presale","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","document","getElementById","click","connected","mintOne","mintTxId","txTimeout","remaining","msg","code","location","reload","indexOf","toggleMintButton","now","Container","marginTop","maxWidth","position","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","clusterUrl","handleTransaction","broadcastTransaction","autoShowModal","val","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","REACT_APP_CANDY_MACHINE_ID","getCandyMachineId","Connection","App","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.7fade91f.chunk.js","sourcesContent":["import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = beforeTransactions;\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n  unsignedTxns.push(...afterTransactions);\r\n\r\n  const partiallySignedTransactions = unsignedTxns.filter(t =>\r\n    t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  const fullySignedTransactions = unsignedTxns.filter(\r\n    t => !t.signatures.find(sig => sig.publicKey.equals(wallet.publicKey)),\r\n  );\r\n  let signedTxns = await wallet.signAllTransactions(\r\n    partiallySignedTransactions,\r\n  );\r\n  signedTxns = fullySignedTransactions.concat(signedTxns);\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise.then(({ txid, slot }) =>\r\n          successCallback(txid, i),\r\n        );\r\n        pendingTxns.push(signedTxnPromise);\r\n      } catch (e) {\r\n        console.log('Failed at txn index:', i);\r\n        console.log('Caught failure:', e);\r\n\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          return {\r\n            number: i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    const result = await Promise.all(pendingTxns);\r\n    return { number: signedTxns.length, txs: result };\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[] | Transaction,\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction: Transaction;\r\n  if (instructions instanceof Transaction) {\r\n    transaction = instructions;\r\n  } else {\r\n    transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = (\r\n      block || (await connection.getRecentBlockhash(commitment))\r\n    ).blockhash;\r\n\r\n    if (includesFeePayer) {\r\n      transaction.setSigners(...signers.map(s => s.publicKey));\r\n    } else {\r\n      transaction.setSigners(\r\n        // fee payed by the wallet owner\r\n        wallet.publicKey,\r\n        ...signers.map(s => s.publicKey),\r\n      );\r\n    }\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n    if (!includesFeePayer) {\r\n      transaction = await wallet.signTransaction(transaction);\r\n    }\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport {\r\n  SystemProgram,\r\n  Transaction,\r\n  SYSVAR_SLOT_HASHES_PUBKEY,\r\n} from '@solana/web3.js';\r\nimport { sendTransactions, SequenceType } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  authority: anchor.web3.PublicKey;\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n  retainAuthority: boolean;\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'processed',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      authority: state.authority,\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n      retainAuthority: state.data.retainAuthority,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const getCollectionPDA = async (\r\n  candyMachineAddress: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('collection'), candyMachineAddress.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport interface CollectionData {\r\n  mint: anchor.web3.PublicKey;\r\n  candyMachine: anchor.web3.PublicKey;\r\n}\r\n\r\nexport const getCollectionAuthorityRecordPDA = async (\r\n  mint: anchor.web3.PublicKey,\r\n  newAuthority: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('collection_authority'),\r\n        newAuthority.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n  beforeTransactions: Transaction[] = [],\r\n  afterTransactions: Transaction[] = [],\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  console.log(remainingAccounts.map(rm => rm.pubkey.toBase58()));\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  const [collectionPDA] = await getCollectionPDA(candyMachineAddress);\r\n  const collectionPDAAccount =\r\n    await candyMachine.program.provider.connection.getAccountInfo(\r\n      collectionPDA,\r\n    );\r\n\r\n  if (collectionPDAAccount && candyMachine.state.retainAuthority) {\r\n    try {\r\n      const collectionData =\r\n        (await candyMachine.program.account.collectionPda.fetch(\r\n          collectionPDA,\r\n        )) as CollectionData;\r\n      console.log(collectionData);\r\n      const collectionMint = collectionData.mint;\r\n      const collectionAuthorityRecord = await getCollectionAuthorityRecordPDA(\r\n        collectionMint,\r\n        collectionPDA,\r\n      );\r\n      console.log(collectionMint);\r\n      if (collectionMint) {\r\n        const collectionMetadata = await getMetadata(collectionMint);\r\n        const collectionMasterEdition = await getMasterEdition(collectionMint);\r\n        console.log('Collection PDA: ', collectionPDA.toBase58());\r\n        console.log('Authority: ', candyMachine.state.authority.toBase58());\r\n        instructions.push(\r\n          await candyMachine.program.instruction.setCollectionDuringMint({\r\n            accounts: {\r\n              candyMachine: candyMachineAddress,\r\n              metadata: metadataAddress,\r\n              payer: payer,\r\n              collectionPda: collectionPDA,\r\n              tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n              instructions: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n              collectionMint,\r\n              collectionMetadata,\r\n              collectionMasterEdition,\r\n              authority: candyMachine.state.authority,\r\n              collectionAuthorityRecord,\r\n            },\r\n          }),\r\n        );\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }\r\n\r\n  const instructionsMatrix: anchor.web3.TransactionInstruction[][] = [];\r\n  const signersMatrix: anchor.web3.Keypair[][] = [];\r\n\r\n  const state = candyMachine.state;\r\n  const txnEstimate =\r\n    892 +\r\n    (collectionPDAAccount && state.retainAuthority ? 182 : 0) +\r\n    (state.tokenMint ? 177 : 0) +\r\n    (state.whitelistMintSettings ? 33 : 0) +\r\n    (state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\r\n    (state.gatekeeper ? 33 : 0) +\r\n    (state.gatekeeper?.expireOnUse ? 66 : 0);\r\n\r\n  const INIT_INSTRUCTIONS_LENGTH = 4;\r\n  const INIT_SIGNERS_LENGTH = 1;\r\n\r\n  console.log('Transaction estimate: ', txnEstimate);\r\n  if (txnEstimate > 1230) {\r\n    const initInstructions = instructions.splice(0, INIT_INSTRUCTIONS_LENGTH);\r\n    console.log(initInstructions);\r\n    instructionsMatrix.push(initInstructions);\r\n    const initSigners = signers.splice(0, INIT_SIGNERS_LENGTH);\r\n    signersMatrix.push(initSigners);\r\n  }\r\n\r\n  instructionsMatrix.push(instructions);\r\n  signersMatrix.push(signers);\r\n\r\n  if (cleanupInstructions.length > 0) {\r\n    instructionsMatrix.push(cleanupInstructions);\r\n    signersMatrix.push([]);\r\n  }\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        instructionsMatrix,\r\n        signersMatrix,\r\n        SequenceType.StopOnFailure,\r\n        'singleGossip',\r\n        () => {},\r\n        () => false,\r\n        undefined,\r\n        beforeTransactions,\r\n        afterTransactions,\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from 'styled-components';\nimport Button from '@material-ui/core/Button';\nimport { CandyMachineAccount } from './candy-machine';\nimport { CircularProgress } from '@material-ui/core';\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\nimport { useEffect, useState, useRef } from 'react';\nimport { useConnection, useWallet } from '@solana/wallet-adapter-react';\nimport {\n  findGatewayToken,\n  getGatewayTokenAddressForOwnerAndGatekeeperNetwork,\n  onGatewayTokenChange,\n  removeAccountChangeListener,\n} from '@identity.com/solana-gateway-ts';\n\nexport const CTAButton = styled(Button)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`; // add your own styles here\n\nexport const MintButton = ({\n  onMint,\n  candyMachine,\n  isMinting,\n  rpcUrl,\n  setIsMinting,\n  isActive,\n}: {\n  onMint: () => Promise<void>;\n  candyMachine?: CandyMachineAccount;\n  isMinting: boolean;\n  setIsMinting: (val: boolean) => void;\n  isActive: boolean;\n  rpcUrl: string;\n}) => {\n  const wallet = useWallet();\n  const connection = useConnection();\n  const [verified, setVerified] = useState(false);\n  const { requestGatewayToken, gatewayStatus } = useGateway();\n  const [webSocketSubscriptionId, setWebSocketSubscriptionId] = useState(-1);\n  const [clicked, setClicked] = useState(false);\n\n  const getMintButtonContent = () => {\n    if (candyMachine?.state.isSoldOut) {\n      return 'SOLD OUT';\n    } else if (isMinting) {\n      return <CircularProgress />;\n    } else if (\n      candyMachine?.state.isPresale ||\n      candyMachine?.state.isWhitelistOnly\n    ) {\n      return 'WHITELIST MINT';\n    }\n\n    return 'MINER';\n  };\n\n  useEffect(() => {\n    const mint = async () => {\n      await removeAccountChangeListener(\n        connection.connection,\n        webSocketSubscriptionId,\n      );\n      await onMint();\n\n      setClicked(false);\n      setVerified(false);\n    };\n    if (verified && clicked) {\n      mint();\n    }\n  }, [\n    verified,\n    clicked,\n    connection.connection,\n    onMint,\n    webSocketSubscriptionId,\n  ]);\n\n  const previousGatewayStatus = usePrevious(gatewayStatus);\n  useEffect(() => {\n    const fromStates = [\n      GatewayStatus.NOT_REQUESTED,\n      GatewayStatus.REFRESH_TOKEN_REQUIRED,\n    ];\n    const invalidToStates = [...fromStates, GatewayStatus.UNKNOWN];\n    if (\n      fromStates.find(state => previousGatewayStatus === state) &&\n      !invalidToStates.find(state => gatewayStatus === state)\n    ) {\n      setIsMinting(true);\n    }\n    console.log('change: ', gatewayStatus);\n  }, [setIsMinting, previousGatewayStatus, gatewayStatus]);\n\n  return (\n    <CTAButton\n      disabled={isMinting || !isActive}\n      onClick={async () => {\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\n          const network =\n            candyMachine.state.gatekeeper.gatekeeperNetwork.toBase58();\n          if (network === 'ignREusXmGrscGNUesoU9mxfds9AiYTezUKex2PsZV6') {\n            if (gatewayStatus === GatewayStatus.ACTIVE) {\n              await onMint();\n            } else {\n              // setIsMinting(true);\n              await requestGatewayToken();\n              console.log('after: ', gatewayStatus);\n            }\n          } else if (\n            network === 'ttib7tuX8PTWPqFsmUFQTj78MbRhUmqxidJRDv4hRRE' ||\n            network === 'tibePmPaoTgrs929rWpu755EXaxC7M3SthVCf6GzjZt'\n          ) {\n            setClicked(true);\n            const gatewayToken = await findGatewayToken(\n              connection.connection,\n              wallet.publicKey!,\n              candyMachine.state.gatekeeper.gatekeeperNetwork,\n            );\n\n            if (gatewayToken?.isValid()) {\n              await onMint();\n            } else {\n              let endpoint = rpcUrl;\n              if (endpoint.endsWith('/')) endpoint = endpoint.slice(0, -1);\n              if (!endpoint.startsWith('https'))\n                endpoint = 'https' + endpoint.slice(4);\n\n              window.open(\n                `https://verify.encore.fans/?endpoint=${endpoint}&gkNetwork=${network}`,\n                '_blank',\n              );\n\n              const gatewayTokenAddress =\n                await getGatewayTokenAddressForOwnerAndGatekeeperNetwork(\n                  wallet.publicKey!,\n                  candyMachine.state.gatekeeper.gatekeeperNetwork,\n                );\n\n              setWebSocketSubscriptionId(\n                onGatewayTokenChange(\n                  connection.connection,\n                  gatewayTokenAddress,\n                  () => setVerified(true),\n                  'confirmed',\n                ),\n              );\n            }\n          } else {\n            setClicked(false);\n            throw new Error(`Unknown Gatekeeper Network: ${network}`);\n          }\n        } else {\n          await onMint();\n          setClicked(false);\n        }\n      }}\n      variant=\"contained\"\n    >\n      {getMintButtonContent()}\n    </CTAButton>\n  );\n};\n\nfunction usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  }, [value]);\n  return ref.current;\n}\n","import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { PublicKey, Transaction } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\nimport { sendTransaction } from './connection';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\r\n  color: white;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div``; // add your owns styles here\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        let active =\r\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\r\n        let presale = false;\r\n        // whitelist mint?\r\n        if (cndy?.state.whitelistMintSettings) {\r\n          // is it a presale mint?\r\n          if (\r\n            cndy.state.whitelistMintSettings.presale &&\r\n            (!cndy.state.goLiveDate ||\r\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n          ) {\r\n            presale = true;\r\n          }\r\n          // is there a discount?\r\n          if (cndy.state.whitelistMintSettings.discountPrice) {\r\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n          } else {\r\n            setDiscountPrice(undefined);\r\n            // when presale=false and discountPrice=null, mint is restricted\r\n            // to whitelist users only\r\n            if (!cndy.state.whitelistMintSettings.presale) {\r\n              cndy.state.isWhitelistOnly = true;\r\n            }\r\n          }\r\n          // retrieves the whitelist token\r\n          const mint = new anchor.web3.PublicKey(\r\n            cndy.state.whitelistMintSettings.mint,\r\n          );\r\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\r\n\r\n          try {\r\n            const balance = await props.connection.getTokenAccountBalance(\r\n              token,\r\n            );\r\n            let valid = parseInt(balance.value.amount) > 0;\r\n            // only whitelist the user if the balance > 0\r\n            setIsWhitelistUser(valid);\r\n            active = (presale && valid) || active;\r\n          } catch (e) {\r\n            setIsWhitelistUser(false);\r\n            // no whitelist user, no mint\r\n            if (cndy.state.isWhitelistOnly) {\r\n              active = false;\r\n            }\r\n            console.log('There was a problem fetching whitelist token balance');\r\n            console.log(e);\r\n          }\r\n        }\r\n        // datetime to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.date) {\r\n          setEndDate(toDate(cndy.state.endSettings.number));\r\n          if (\r\n            cndy.state.endSettings.number.toNumber() <\r\n            new Date().getTime() / 1000\r\n          ) {\r\n            active = false;\r\n          }\r\n        }\r\n        // amount to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.amount) {\r\n          let limit = Math.min(\r\n            cndy.state.endSettings.number.toNumber(),\r\n            cndy.state.itemsAvailable,\r\n          );\r\n          if (cndy.state.itemsRedeemed < limit) {\r\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n          } else {\r\n            setItemsRemaining(0);\r\n            cndy.state.isSoldOut = true;\r\n          }\r\n        } else {\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n        }\r\n\r\n        if (cndy.state.isSoldOut) {\r\n          active = false;\r\n        }\r\n\r\n        setIsActive((cndy.state.isActive = active));\r\n        setIsPresale((cndy.state.isPresale = presale));\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log('There was a problem fetching Candy Machine state');\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  const onMint = async (\r\n    beforeTransactions: Transaction[] = [],\r\n    afterTransactions: Transaction[] = [],\r\n  ) => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        let mintOne = await mintOneToken(\r\n          candyMachine,\r\n          wallet.publicKey,\r\n          beforeTransactions,\r\n          afterTransactions,\r\n        );\r\n\r\n        const mintTxId = mintOne[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (status && !status.err) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          let remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction Timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          console.log(error);\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n      // updates the candy machine state to reflect the lastest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100 }}>\r\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: '#151A1F',\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: 'bold',\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? 'Discount Price'\r\n                        : 'Price'}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: 'bold' }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price,\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: 'bold' }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? 'COMPLETED'\r\n                              : isPresale\r\n                              ? 'PRESALE'\r\n                              : 'LIVE'\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: 'bold' }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    handleTransaction={async (transaction: Transaction) => {\r\n                      setIsUserMinting(true);\r\n                      const userMustSign = transaction.signatures.find(sig =>\r\n                        sig.publicKey.equals(wallet.publicKey!),\r\n                      );\r\n                      if (userMustSign) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign one-time Civic Pass issuance',\r\n                          severity: 'info',\r\n                        });\r\n                        try {\r\n                          transaction = await wallet.signTransaction!(\r\n                            transaction,\r\n                          );\r\n                        } catch (e) {\r\n                          setAlertState({\r\n                            open: true,\r\n                            message: 'User cancelled signing',\r\n                            severity: 'error',\r\n                          });\r\n                          // setTimeout(() => window.location.reload(), 2000);\r\n                          setIsUserMinting(false);\r\n                          throw e;\r\n                        }\r\n                      } else {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Refreshing Civic Pass',\r\n                          severity: 'info',\r\n                        });\r\n                      }\r\n                      try {\r\n                        await sendTransaction(\r\n                          props.connection,\r\n                          wallet,\r\n                          transaction,\r\n                          [],\r\n                          true,\r\n                          'confirmed',\r\n                        );\r\n                        setAlertState({\r\n                          open: true,\r\n                          message: 'Please sign minting',\r\n                          severity: 'info',\r\n                        });\r\n                      } catch (e) {\r\n                        setAlertState({\r\n                          open: true,\r\n                          message:\r\n                            'Solana dropped the transaction, please try again',\r\n                          severity: 'warning',\r\n                        });\r\n                        console.error(e);\r\n                        // setTimeout(() => window.location.reload(), 2000);\r\n                        setIsUserMinting(false);\r\n                        throw e;\r\n                      }\r\n                      await onMint();\r\n                    }}\r\n                    broadcastTransaction={false}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      setIsMinting={val => setIsUserMinting(val)}\r\n                      onMint={onMint}\r\n                      isActive={isActive || (isPresale && isWhitelistUser)}\r\n                      rpcUrl={rpcUrl}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    setIsMinting={val => setIsUserMinting(val)}\r\n                    onMint={onMint}\r\n                    isActive={isActive || (isPresale && isWhitelistUser)}\r\n                    rpcUrl={rpcUrl}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 7, color: 'grey' }}\r\n          >\r\n            Powered by METAPLEX\r\n          </Typography>\r\n        </Paper>\r\n      </Container>\r\n\r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount,\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined,\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={txTimeoutInMilliseconds}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n"],"sourceRoot":""}